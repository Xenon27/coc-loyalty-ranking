
<template>
  <v-container>
    <v-row>
      <v-col>
        <h2>Ranking</h2>
      </v-col>
      <v-col>
        <v-select
          v-model="selectedClans"
          :items="availableClans"
          label="Clans"
          multiple
          attach
          chips
          item-value="name"
          item-text="name"
          @change="filterUsers"
        >
          <template v-slot:item="{ item }">
            <v-list-item>
              <v-list-item-action>
                <v-checkbox :value="isSelected(item.name)" :input-value="isSelected(item.name)" @click.stop.prevent="toggleClan(item.name)"></v-checkbox>
              </v-list-item-action>
              <v-list-item-content>
                <v-list-item-title>{{ item.name }}</v-list-item-title>
              </v-list-item-content>
            </v-list-item>
          </template>
        </v-select>
      </v-col>
    </v-row>
    <v-row>
      <v-col>
        <v-list>
          <v-list-item
            v-for="user in filteredUsers"
            :key="user.id"
          >
            <v-list-item-content>
              <v-list-item-title>{{ user.name }} - {{ user.clan }} - {{ user.time }}</v-list-item-title>
            </v-list-item-content>
          </v-list-item>
        </v-list>
      </v-col>
    </v-row>
  </v-container>
</template>

<script>
export default {
  data() {
    return {
      selectedClans: [],
      users: [
        { id: 1, name: 'Benutzer A', clan: 'Clan A', time: "2 Jahre" },
        { id: 2, name: 'Benutzer B', clan: 'Clan B', time: "3 Jahre" },
        { id: 3, name: 'Benutzer C', clan: 'Clan C', time: "1 Wochen" },
        { id: 4, name: 'Benutzer D', clan: 'Clan D', time: "8 Tage" },
        { id: 5, name: 'Mobias Tenzel', clan: 'Clan B', time: "1 Stunden" },
        { id: 6, name: 'Tobias Menzel', clan: 'FruchtLabor', time: "123456789 Jahre" },
        // Fügen Sie hier weitere Benutzer hinzu
      ],
      filteredUsers: [],
    };
  },
  computed: {
    availableClans() {
      const clansSet = new Set(this.users.map(user => user.clan));
      return Array.from(clansSet).map(clanName => ({ name: clanName }));
    },
    filteredUsers() {
      if (!this.selectedClans.length) {
        return this.users;
      }
      return this.users.filter(user => this.selectedClans.includes(user.clan));
    },
  },
  methods: {
    filterUsers() {
      // Da filteredUsers bereits eine berechnete Eigenschaft ist, muss sie nicht aktualisiert werden.
      // Die berechnete Eigenschaft wird automatisch neu berechnet, wenn ihre Abhängigkeiten sich ändern,
      // in diesem Fall `selectedClans`.
    },
    toggleClan(clanName) {
      const index = this.selectedClans.indexOf(clanName);
      if (index > -1) {
        this.selectedClans.splice(index, 1);
      } else {
        this.selectedClans.push(clanName);
      }
      // Es ist nicht notwendig, filterUsers hier aufzurufen, da filteredUsers eine berechnete Eigenschaft ist.
    },
    isSelected(clanName) {
      return this.selectedClans.includes(clanName);
    },
  },
};
</script>
